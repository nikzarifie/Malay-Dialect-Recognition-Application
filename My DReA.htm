<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Malay Dialect Recognition Application - My DReA</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
        body {
            font-family: 'Roboto', sans-serif;
            text-align: center;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
            transition: background-color 0.5s;
            color: #333;
        }
        .container {
            margin: 20px;
        }
        h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 20px;
            transition: color 0.5s;
        }
        button {
            background-color: #4caf50;
            color: white;
            border: none;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            transition: background-color 0.4s, box-shadow 0.4s;
            cursor: pointer;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        button:hover {
            background-color: #45a049;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        #label-container {
            margin-top: 20px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        .progress-bar {
            width: 100%;
            background-color: #ddd;
            border-radius: 5px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        .progress {
            height: 24px;
            background-color: #4caf50;
            width: 0;
            transition: width 0.4s ease;
        }
        .listening-indicator {
            margin-top: 20px;
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            color: red;
            transition: color 0.5s;
        }
        .listening-icon {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 140px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%; 
            left: 50%;
            margin-left: -70px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .tooltip .tooltiptext::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #555 transparent transparent transparent;
        }
        @media (max-width: 600px) {
            button {
                width: 100%;
                margin: 10px 0;
            }
            .progress {
                height: 16px;
            }
        }
        .dark-mode {
            background-color: #333;
            color: white;
        }
        .dark-mode h1 {
            color: white;
        }
        .dark-mode button {
            background-color: #444;
            color: white;
            border: 2px solid #555;
        }
        .dark-mode button:hover {
            background-color: #555;
            color: white;
        }
        .dark-mode .tooltip .tooltiptext {
            background-color: #222;
        }
        .dark-mode .tooltip .tooltiptext::after {
            border-color: #222 transparent transparent transparent;
        }
        .dark-mode .listening-indicator {
            color: #ff5555;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Malay Dialect Recognition Application - My DReA</h1>
        <div class="tooltip">
            <button type="button" onclick="init()">Start</button>
            <span class="tooltiptext">Start Listening</span>
        </div>
        <div class="tooltip">
            <button type="button" onclick="stopListening()">Stop</button>
            <span class="tooltiptext">Stop Listening</span>
        </div>
        <div class="tooltip">
            <button type="button" onclick="clearResults()">Clear</button>
            <span class="tooltiptext">Clear Results</span>
        </div>
        <button type="button" onclick="toggleDarkMode()">Toggle Dark Mode</button>
        <div id="label-container"></div>
        <div id="listening-indicator" class="listening-indicator" style="display: none;">
            <i class="fas fa-microphone listening-icon"></i>
            Listening...
        </div>
    </div>

    <script type="text/javascript">
        const URL = "https://teachablemachine.withgoogle.com/models/vAf3ydpeW/";
        let recognizer;

        async function createModel() {
            const checkpointURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";
            recognizer = speechCommands.create(
                "BROWSER_FFT",
                undefined,
                checkpointURL,
                metadataURL
            );
            await recognizer.ensureModelLoaded();
            return recognizer;
        }

        async function init() {
            if (!recognizer) {
                recognizer = await createModel();
            }
            const classLabels = recognizer.wordLabels();
            const labelContainer = document.getElementById("label-container");
            labelContainer.innerHTML = "";

            for (let i = 0; i < classLabels.length; i++) {
                const labelDiv = document.createElement("div");
                labelDiv.innerHTML = classLabels[i];
                const progressBar = document.createElement("div");
                progressBar.className = "progress-bar";
                const progress = document.createElement("div");
                progress.className = "progress";
                progressBar.appendChild(progress);
                labelDiv.appendChild(progressBar);
                labelContainer.appendChild(labelDiv);
            }

            document.getElementById("listening-indicator").style.display = "flex";

            recognizer.listen(result => {
                const scores = result.scores;
                for (let i = 0; i < classLabels.length; i++) {
                    const progress = labelContainer.childNodes[i].querySelector(".progress");
                    progress.style.width = (scores[i] * 100).toFixed(2) + "%";
                    progress.style.backgroundColor = getColor(scores[i]);
                }
            }, {
                includeSpectrogram: true,
                probabilityThreshold: 0.75,
                invokeCallbackOnNoiseAndUnknown: true,
                overlapFactor: 0.50
            });
        }

        function stopListening() {
            if (recognizer) {
                recognizer.stopListening();
            }
            document.getElementById("listening-indicator").style.display = "none";
        }

        function clearResults() {
            const labelContainer = document.getElementById("label-container");
            labelContainer.innerHTML = "";
        }

        function getColor(score) {
            if (score > 0.75) return "#4caf50";
            if (score > 0.5) return "#ffeb3b";
            return "#f44336";
        }

        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
        }
    </script>
</body>
</html>
